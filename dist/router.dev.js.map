{"version":3,"sources":["../src/memoize-decorator.ts","config.ts","router.ts"],"names":[],"mappings":"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","file":"router.dev.js","sourceRoot":"../src","sourcesContent":["export function Memoize(hashFunction?: (...args: any[]) => any) {\n\treturn (target: Object, propertyKey: string, descriptor: TypedPropertyDescriptor<any>) => {\n\n\t\tif (descriptor.value != null) {\n\t\t\tdescriptor.value = getNewFunction(descriptor.value, hashFunction);\n\t\t} else if (descriptor.get != null) {\n\t\t\tdescriptor.get = getNewFunction(descriptor.get, hashFunction);\n\t\t} else {\n\t\t\tthrow 'Only put a Memoize() decorator on a method or get accessor.';\n\t\t}\n\n\n\t};\n}\n\nlet counter = 0;\nfunction getNewFunction(originalMethod: () => void, hashFunction?: (...args: any[]) => any) {\n\tconst identifier = ++counter;\n\n\t// The function returned here gets called instead of originalMethod.\n\treturn function (...args: any[]) {\n\t\tconst propValName = `__memoized_value_${identifier}`;\n\t\tconst propMapName = `__memoized_map_${identifier}`;\n\n\t\tlet returnedValue: any;\n\n\t\tif (hashFunction || args.length > 0) {\n\n\t\t\t// Get or create map\n\t\t\tif (!this.hasOwnProperty(propMapName)) {\n\t\t\t\tObject.defineProperty(this, propMapName, {\n\t\t\t\t\tconfigurable: false,\n\t\t\t\t\tenumerable: false,\n\t\t\t\t\twritable: false,\n\t\t\t\t\tvalue: new Map<any, any>()\n\t\t\t\t});\n\t\t\t}\n\t\t\tlet myMap: Map<any, any> = this[propMapName];\n\n\t\t\tlet hashKey: any;\n\n\t\t\tif (hashFunction) {\n\t\t\t\thashKey = hashFunction.apply(this, args);\n\t\t\t} else {\n\t\t\t\thashKey = args[0];\n\t\t\t}\n\n\t\t\tif (myMap.has(hashKey)) {\n\t\t\t\treturnedValue = myMap.get(hashKey);\n\t\t\t} else {\n\t\t\t\treturnedValue = originalMethod.apply(this, args);\n\t\t\t\tmyMap.set(hashKey, returnedValue);\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif (this.hasOwnProperty(propValName)) {\n\t\t\t\treturnedValue = this[propValName];\n\t\t\t} else {\n\t\t\t\treturnedValue = originalMethod.apply(this, args);\n\t\t\t\tObject.defineProperty(this, propValName, {\n\t\t\t\t\tconfigurable: false,\n\t\t\t\t\tenumerable: false,\n\t\t\t\t\twritable: false,\n\t\t\t\t\tvalue: returnedValue\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn returnedValue;\n\t};\n}\n","import { IConfig } from './interfaces/config';\n\nexport const Config: IConfig = {\n  settings: {\n    hash: '#!',\n    wildcard: '*'\n  },\n  regex: {\n    settings: {\n      default: /[a-zA-Z0-9]/g,\n      href: /(www|http:|https:)+[^\\s]+[\\w]/g\n    },\n    routes: {\n      variables: /(:(?!qargs)[a-zA-Z]*)/g\n    }\n  },\n  intervals: {\n    start: 10,\n    listener: 250\n  }\n};\n","import { Memoize } from 'typescript-memoize';\nimport {\n  IObject,\n  IRouterClient,\n  IRouterToolsResult,\n  IRouterToolsDetails,\n  IRouterTools,\n  IRouterArgs,\n  IRouter\n} from './interfaces/router';\nimport { IRouterLocation } from './interfaces/event';\nimport { IConfig } from './interfaces/config';\nimport { Config } from './config';\n\n// Provider for generating memoize cache keys for router tools.\n// @param {string} route\n// @param {string} source\n// @returns {string}\nconst memoizeRTKey = (route: string, source: string): string => `${route}:${source}`;\n\nclass RouterTools implements IRouterTools {\n  public config: IConfig;\n\n  constructor (config: IConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Provides basic information for both a route and source path.\n   * @param {string} route - Route for inspection.\n   * @param {string} source - Source path.\n   * @returns {IRouterToolsResult}\n\n    inspect('/user/1/profile?strict=true#header', '/user/:userId/profile') =>\n\n      {\n        route: ['user', '1', 'profile'],\n        query: 'strict=true',\n        fragment: 'header',\n        source: ['user', ':userId', 'profile']\n      }\n\n   */\n  @Memoize(memoizeRTKey)\n  inspect (route: string, source: string): IRouterToolsResult {\n    let parts;\n    let query = '';\n    let fragment = '';\n\n    // skip computations on empty path\n    if (route !== '/') {\n      // split route path\n      parts = route.split('/');\n      // remove trailing from path\n      const trailing = parts.slice(-1)[0];\n      if (trailing.split('#').length > 1) {\n        // provide fragment\n        fragment = trailing.split('#')[1];\n      }\n      // provide query arguments\n      if (trailing.indexOf('?') !== -1) {\n        query = trailing.split('?')[1].split('#')[0];\n      }\n      // remove query arguments + fragment from route\n      // remove expected empty first element\n      parts = parts\n        .join('/')\n        .split('?')[0]\n        .split('/')\n        .slice(1);\n    } else {\n      // default to route \"/\"\n      parts = ['/'];\n    }\n\n    return {\n      route: parts,\n      query,\n      fragment,\n      // split source path and remove expected empty first element\n      source: source !== '/' ? source.split('/').slice(1) : [source]\n    };\n  }\n\n  /**\n   * Match a given route with a source path.\n   * @param route - Route to match against source path.\n   * @param source - Source path to match against route.\n   * @returns {boolean}\n\n    match('/user/search/groups', '/user/:userId/profile') => false\n    match('/user/1/profile', '/user/:userId/profile') => true\n    match('/some/route/yo', '*') => true\n\n   */\n  @Memoize(memoizeRTKey)\n  match (route: string, source: string): boolean {\n    // skip computation and match if path is wildcard\n    if (source !== this.config.settings.wildcard) {\n      const result = this.inspect(route, source);\n      // don't even bother computations if length mismatch in path\n      if (result.route.length === result.source.length) {\n        for (const i in result.source) {\n          // fail if not variable as denoted by source and chunk mismatch\n          // result.source => ['user', ':userId', 'profile']\n          // result.route => ['user', 'search', 'groups']\n          // result.source[3] != result.route[3]\n          if (\n            !result.source[i].startsWith(':') &&\n            result.route[i] !== result.source[i]\n          ) {\n            return false;\n          }\n        }\n      } else {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Provides detailed information for both a route and source path.\n   * @param route - Route to process.\n   * @param source - Source path to process.\n   * @returns {boolean}\n\n    process('/user/1/profile?strict=true#header', '/user/:userId/profile') =>\n\n      {\n        result: {\n          route: ['user', '1', 'profile'],\n          query: 'strict=true',\n          fragment: 'header',\n          source: ['user', ':userId', 'profile']\n        },\n        variables: {\n          userId: 1\n        }\n        args: {\n          strict: 'true'\n        }\n      }\n\n   */\n  @Memoize(memoizeRTKey)\n  process (route: string, source: string): IRouterToolsDetails {\n    const result = this.inspect(route, source);\n    const variables: IObject = {};\n    const args: IObject = {};\n\n    result.source.forEach((part, i) => {\n      if (part.startsWith(':')) {\n        const name = part.slice(1);\n        const value = result.route[i];\n        variables[name] = value;\n      }\n    });\n\n    if (result.query) {\n      // deconstruct provided query string\n      const query = result.query.split('&');\n      query.forEach(arg => {\n        const temp: Array<string> = arg.split('=');\n        if (temp.length === 2) {\n          // assign query string arguments\n          args[temp[0]] = temp[1];\n        }\n      });\n    }\n\n    return {\n      result,\n      variables,\n      args\n    };\n  }\n}\n\nclass Router implements IRouter {\n  public config: IConfig;\n  public running: boolean;\n  public legacySupport: boolean;\n  public listenerKey?: number;\n  public client?: IRouterClient;\n\n  public $tools: IRouterTools;\n  public $previous: IRouterLocation;\n\n  constructor (args: IRouterArgs) {\n    this.config = Object.assign(args.config || {}, Config);\n    this.client = args.client;\n    this.running = false;\n    // set to legacy mode if target HTML5 history api event not detected\n    this.legacySupport = !('onpopstate' in window);\n    this.$tools = new RouterTools(this.config);\n    this.$previous = {\n      path: '',\n      hash: '',\n      href: ''\n    };\n  }\n\n  /**\n   * Get detailed window location info.\n   * @returns {IRouterLocation}\n   */\n  get $location (): IRouterLocation {\n    let path = '';\n    const hash = window.location.hash;\n    if (hash.split(this.config.settings.hash).length > 1) {\n      path = hash.split(this.config.settings.hash)[1];\n      if (!path.startsWith('/')) {\n        path = `/${path}`;\n      }\n    }\n    return {\n      path: path,\n      hash: hash,\n      href: window.location.href\n    };\n  }\n\n  /** Subroutine for handling router navigation events */\n  watch () {\n    if (this.running) {\n      // if legacy support detected and location unchanged between previous and current cycle\n      // skip trigger for navigation event\n      if (\n        this.legacySupport &&\n        JSON.stringify(this.$location) === JSON.stringify(this.$previous)\n      ) {\n        // bypass onNavigate trigger\n        return;\n      }\n      if (this.client && this.client.onNavigate) {\n        this.client.onNavigate({\n          $tools: this.$tools,\n          location: this.$location,\n          previous: this.$previous\n        });\n      }\n      this.$previous = this.$location;\n    }\n  }\n\n  /** Start router listener on navigation events */\n  start () {\n    if (!this.running) {\n      // toggle routing capabilities\n      this.running = true;\n      // initialize default previous location\n      this.$previous = this.$location;\n      if (this.client && this.client.onStart) {\n        this.client.onStart({\n          $tools: this.$tools,\n          location: this.$location\n        });\n      }\n      if (this.legacySupport) {\n        // if legacy support is detected, set listener on interval\n        setInterval(this.watch.bind(this), this.config.intervals.listener);\n      } else {\n        window.addEventListener('popstate', this.watch.bind(this));\n      }\n    }\n  }\n\n  /** Halt router listener on navigation events */\n  stop () {\n    if (this.running) {\n      // toggle routing capabilities\n      this.running = false;\n      if (this.client && this.client.onStop) {\n        this.client.onStop({\n          $tools: this.$tools,\n          location: this.$location\n        });\n      }\n      if (this.legacySupport) {\n        window.removeEventListener('popstate', this.watch);\n      } else {\n        window.clearInterval(this.listenerKey);\n      }\n    }\n  }\n}\n\nmodule.exports = Router;\n"]}